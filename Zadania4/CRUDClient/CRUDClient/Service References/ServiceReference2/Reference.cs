//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRUDClient.ServiceReference2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Review", Namespace="http://schemas.datacontract.org/2004/07/ObjectsManager.Model")]
    [System.SerializableAttribute()]
    public partial class Review : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CRUDClient.ServiceReference2.Person AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MovieIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CRUDClient.ServiceReference2.Person Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MovieId {
            get {
                return this.MovieIdField;
            }
            set {
                if ((this.MovieIdField.Equals(value) != true)) {
                    this.MovieIdField = value;
                    this.RaisePropertyChanged("MovieId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/ObjectsManager.Model")]
    [System.SerializableAttribute()]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IObjectsService")]
    public interface IObjectsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/AddReview", ReplyAction="http://tempuri.org/IObjectsService/AddReviewResponse")]
        int AddReview(CRUDClient.ServiceReference2.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/AddReview", ReplyAction="http://tempuri.org/IObjectsService/AddReviewResponse")]
        System.Threading.Tasks.Task<int> AddReviewAsync(CRUDClient.ServiceReference2.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetReview", ReplyAction="http://tempuri.org/IObjectsService/GetReviewResponse")]
        CRUDClient.ServiceReference2.Review GetReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetReview", ReplyAction="http://tempuri.org/IObjectsService/GetReviewResponse")]
        System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Review> GetReviewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllReviews", ReplyAction="http://tempuri.org/IObjectsService/GetAllReviewsResponse")]
        CRUDClient.ServiceReference2.Review[] GetAllReviews();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllReviews", ReplyAction="http://tempuri.org/IObjectsService/GetAllReviewsResponse")]
        System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Review[]> GetAllReviewsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/UpdateReview", ReplyAction="http://tempuri.org/IObjectsService/UpdateReviewResponse")]
        CRUDClient.ServiceReference2.Review UpdateReview(CRUDClient.ServiceReference2.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/UpdateReview", ReplyAction="http://tempuri.org/IObjectsService/UpdateReviewResponse")]
        System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Review> UpdateReviewAsync(CRUDClient.ServiceReference2.Review review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/DeleteReview", ReplyAction="http://tempuri.org/IObjectsService/DeleteReviewResponse")]
        bool DeleteReview(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/DeleteReview", ReplyAction="http://tempuri.org/IObjectsService/DeleteReviewResponse")]
        System.Threading.Tasks.Task<bool> DeleteReviewAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/AddPerson", ReplyAction="http://tempuri.org/IObjectsService/AddPersonResponse")]
        int AddPerson(CRUDClient.ServiceReference2.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/AddPerson", ReplyAction="http://tempuri.org/IObjectsService/AddPersonResponse")]
        System.Threading.Tasks.Task<int> AddPersonAsync(CRUDClient.ServiceReference2.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetPerson", ReplyAction="http://tempuri.org/IObjectsService/GetPersonResponse")]
        CRUDClient.ServiceReference2.Person GetPerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetPerson", ReplyAction="http://tempuri.org/IObjectsService/GetPersonResponse")]
        System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Person> GetPersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllPersons", ReplyAction="http://tempuri.org/IObjectsService/GetAllPersonsResponse")]
        CRUDClient.ServiceReference2.Person[] GetAllPersons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/GetAllPersons", ReplyAction="http://tempuri.org/IObjectsService/GetAllPersonsResponse")]
        System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Person[]> GetAllPersonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/UpdatePerson", ReplyAction="http://tempuri.org/IObjectsService/UpdatePersonResponse")]
        CRUDClient.ServiceReference2.Person UpdatePerson(CRUDClient.ServiceReference2.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/UpdatePerson", ReplyAction="http://tempuri.org/IObjectsService/UpdatePersonResponse")]
        System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Person> UpdatePersonAsync(CRUDClient.ServiceReference2.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/DeletePerson", ReplyAction="http://tempuri.org/IObjectsService/DeletePersonResponse")]
        bool DeletePerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObjectsService/DeletePerson", ReplyAction="http://tempuri.org/IObjectsService/DeletePersonResponse")]
        System.Threading.Tasks.Task<bool> DeletePersonAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IObjectsServiceChannel : CRUDClient.ServiceReference2.IObjectsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ObjectsServiceClient : System.ServiceModel.ClientBase<CRUDClient.ServiceReference2.IObjectsService>, CRUDClient.ServiceReference2.IObjectsService {
        
        public ObjectsServiceClient() {
        }
        
        public ObjectsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ObjectsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ObjectsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ObjectsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddReview(CRUDClient.ServiceReference2.Review review) {
            return base.Channel.AddReview(review);
        }
        
        public System.Threading.Tasks.Task<int> AddReviewAsync(CRUDClient.ServiceReference2.Review review) {
            return base.Channel.AddReviewAsync(review);
        }
        
        public CRUDClient.ServiceReference2.Review GetReview(int id) {
            return base.Channel.GetReview(id);
        }
        
        public System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Review> GetReviewAsync(int id) {
            return base.Channel.GetReviewAsync(id);
        }
        
        public CRUDClient.ServiceReference2.Review[] GetAllReviews() {
            return base.Channel.GetAllReviews();
        }
        
        public System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Review[]> GetAllReviewsAsync() {
            return base.Channel.GetAllReviewsAsync();
        }
        
        public CRUDClient.ServiceReference2.Review UpdateReview(CRUDClient.ServiceReference2.Review review) {
            return base.Channel.UpdateReview(review);
        }
        
        public System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Review> UpdateReviewAsync(CRUDClient.ServiceReference2.Review review) {
            return base.Channel.UpdateReviewAsync(review);
        }
        
        public bool DeleteReview(int id) {
            return base.Channel.DeleteReview(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteReviewAsync(int id) {
            return base.Channel.DeleteReviewAsync(id);
        }
        
        public int AddPerson(CRUDClient.ServiceReference2.Person person) {
            return base.Channel.AddPerson(person);
        }
        
        public System.Threading.Tasks.Task<int> AddPersonAsync(CRUDClient.ServiceReference2.Person person) {
            return base.Channel.AddPersonAsync(person);
        }
        
        public CRUDClient.ServiceReference2.Person GetPerson(int id) {
            return base.Channel.GetPerson(id);
        }
        
        public System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Person> GetPersonAsync(int id) {
            return base.Channel.GetPersonAsync(id);
        }
        
        public CRUDClient.ServiceReference2.Person[] GetAllPersons() {
            return base.Channel.GetAllPersons();
        }
        
        public System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Person[]> GetAllPersonsAsync() {
            return base.Channel.GetAllPersonsAsync();
        }
        
        public CRUDClient.ServiceReference2.Person UpdatePerson(CRUDClient.ServiceReference2.Person person) {
            return base.Channel.UpdatePerson(person);
        }
        
        public System.Threading.Tasks.Task<CRUDClient.ServiceReference2.Person> UpdatePersonAsync(CRUDClient.ServiceReference2.Person person) {
            return base.Channel.UpdatePersonAsync(person);
        }
        
        public bool DeletePerson(int id) {
            return base.Channel.DeletePerson(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePersonAsync(int id) {
            return base.Channel.DeletePersonAsync(id);
        }
    }
}
